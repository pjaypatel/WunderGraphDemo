"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NamespacesTemplate = void 0;
const handlebars_1 = __importDefault(require("handlebars"));
const index_1 = require("./index");
// @ts-ignore
const namespaces_ts_handlebars_1 = __importDefault(require("./namespaces.ts.handlebars"));
class NamespacesTemplate {
    constructor(client) {
        this.client = client;
    }
    async generate(config) {
        const userInfo = await this.client.userInfo();
        const model = {
            namespaces: [],
        };
        if (userInfo && userInfo.user) {
            userInfo.user.namespaces.forEach(ns => {
                const apis = [];
                const environments = [];
                ns.apis.forEach(api => {
                    apis.push({
                        id: api.id,
                        name: api.name,
                    });
                });
                ns.environments.forEach(env => {
                    environments.push({
                        id: env.id,
                        name: env.primaryHostName,
                    });
                });
                model.namespaces.push({
                    name: ns.name,
                    apis,
                    environments
                });
            });
        }
        const input = index_1.loadTemplate(namespaces_ts_handlebars_1.default);
        const tmpl = handlebars_1.default.compile(input);
        const content = tmpl(model);
        return [
            {
                content: index_1.formatTypeScript(content),
                path: "namespaces.ts"
            }
        ];
    }
}
exports.NamespacesTemplate = NamespacesTemplate;
