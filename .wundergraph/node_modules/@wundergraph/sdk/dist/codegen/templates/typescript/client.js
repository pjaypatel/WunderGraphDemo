"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.modelImports = exports.liveQueries = exports.operations = exports.TypeScriptClient = void 0;
const handlebars_1 = __importDefault(require("handlebars"));
const index_1 = require("./index");
const wundernode_config_1 = require("@wundergraph/protobuf/dist/wundernode_config");
const object_hash_1 = __importDefault(require("object-hash"));
// @ts-ignore
const client_ts_handlebars_1 = __importDefault(require("./client.ts.handlebars"));
class TypeScriptClient {
    generate(config) {
        const input = index_1.loadTemplate(client_ts_handlebars_1.default);
        const tmpl = handlebars_1.default.compile(input);
        const _queries = exports.operations(config.application, wundernode_config_1.OperationType.QUERY);
        const _liveQueries = exports.liveQueries(config.application);
        const _mutations = exports.operations(config.application, wundernode_config_1.OperationType.MUTATION);
        const _subscriptions = exports.operations(config.application, wundernode_config_1.OperationType.SUBSCRIPTION);
        const productionBaseURL = "https://" + config.deployment.environment.name;
        const developmentBaseURL = "http://localhost:9991";
        const content = tmpl({
            modelImports: exports.modelImports(config.application),
            baseURL: process.env.NODE_ENV === "production" ? productionBaseURL : developmentBaseURL,
            sdkVersion: config.sdkVersion,
            applicationPath: config.deployment.path,
            applicationHash: object_hash_1.default(config).substring(0, 8),
            queries: _queries,
            liveQueries: _liveQueries,
            hasLiveQueries: _liveQueries.length !== 0,
            hasQueries: _queries.length !== 0,
            mutations: _mutations,
            hasMutations: _mutations.length !== 0,
            subscriptions: _subscriptions,
            hasSubscriptions: _subscriptions.length !== 0,
            hasSubscriptionsOrLiveQueries: _subscriptions.length + _liveQueries.length !== 0,
            authProviders: config.authentication.cookieBased.map(provider => provider.id),
            hasAuthProviders: config.authentication.cookieBased.length !== 0,
        });
        return Promise.resolve([
            {
                path: "client.ts",
                content: index_1.formatTypeScript(content),
            }
        ]);
    }
}
exports.TypeScriptClient = TypeScriptClient;
const operations = (application, operationType) => application.Operations.filter(op => op.OperationType === operationType).map(op => ({
    operationName: op.Name,
    path: op.Name,
    hasInput: op.VariablesSchema.properties && Object.keys(op.VariablesSchema.properties).length !== 0,
}));
exports.operations = operations;
const liveQueries = (application) => application.Operations.filter(op => op.OperationType === wundernode_config_1.OperationType.QUERY && op.LiveQuery && op.LiveQuery.enable).map(op => ({
    operationName: op.Name,
    path: op.Name,
    hasInput: op.VariablesSchema.properties && Object.keys(op.VariablesSchema.properties).length !== 0,
}));
exports.liveQueries = liveQueries;
const modelImports = (application) => {
    return application.Operations
        .map(op => {
        if (op.VariablesSchema.properties && Object.keys(op.VariablesSchema.properties).length !== 0) {
            return `${op.Name}Input,${op.Name}Response`;
        }
        return `${op.Name}Response`;
    }).join(",");
};
exports.modelImports = modelImports;
