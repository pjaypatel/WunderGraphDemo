import { ResolvedWunderGraphConfig } from "../configure";
import { JSONSchema7 as JSONSchema } from "json-schema";
export interface TemplateOutputFile {
    path: string;
    content: string;
}
export interface Template {
    generate: (config: ResolvedWunderGraphConfig) => Promise<TemplateOutputFile[]>;
    dependencies?: () => Template[];
}
export interface CodeGenConfig {
    basePath: string;
    wunderGraphConfig: ResolvedWunderGraphConfig;
    templates: Template[];
}
export interface CodeGenOutWriter {
    writeFileSync: (path: string, content: string) => void;
}
export declare const GenerateCode: (config: CodeGenConfig, customOutWriter?: CodeGenOutWriter | undefined) => Promise<void>;
export declare const mergeTemplateOutput: (outFiles: TemplateOutputFile[]) => TemplateOutputFile[];
export declare type VisitorCallBack = (name: string, isRequired: boolean, isArray: boolean) => void;
export declare type StringVisitorCallBack = (name: string, isRequired: boolean, isArray: boolean, enumValues?: string[]) => void;
export interface VisitorCallBacks {
    enter?: VisitorCallBack;
    leave?: VisitorCallBack;
}
export interface SchemaVisitor {
    root?: {
        enter?: () => void;
        leave?: () => void;
    };
    number?: VisitorCallBack;
    boolean?: VisitorCallBack;
    object?: VisitorCallBacks;
    string?: StringVisitorCallBack;
    array?: VisitorCallBacks;
}
export declare const visitJSONSchema: (schema: JSONSchema, visitor: SchemaVisitor) => void;
