"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RunTemplateTest = void 0;
const index_1 = require("./index");
const definition_1 = require("../definition");
const chai_1 = require("chai");
const wundernode_config_1 = require("@wundergraph/protobuf/dist/wundernode_config");
class FakeTemplate {
    generate(config) {
        const content = config.application.Operations.map(op => op.Name).join("+");
        return Promise.resolve([
            {
                path: "testFile.txt",
                content: content,
            }
        ]);
    }
    uniqueID() {
        return "fake_template";
    }
}
class FakeFileSystem {
    constructor() {
        this.files = {};
    }
    writeFileSync(path, content) {
        this.files[path] = content;
    }
}
test("GenerateCode", async () => {
    const out = await exports.RunTemplateTest(new FakeTemplate(), new FakeTemplate());
    out.equals({
        "generated/testFile.txt": "MyReviews+CreatePet+NewPets"
    });
});
const RunTemplateTest = async (...templates) => {
    const fakeFileSystem = new FakeFileSystem();
    await index_1.GenerateCode({
        basePath: "./generated",
        wunderGraphConfig: {
            sdkVersion: "unknown",
            application: {
                Name: "Test",
                EngineConfiguration: new definition_1.Api("", [], []),
                EnableSingleFlight: true,
                Operations: [
                    {
                        Name: "MyReviews",
                        Content: "query MyReviews {\n  me {\n    name\n    reviews {\n      id\n      body\n    }\n  }\n}",
                        OperationType: wundernode_config_1.OperationType.QUERY,
                        VariablesSchema: {
                            type: "object",
                            properties: {},
                            additionalProperties: false,
                        },
                        ResponseSchema: {
                            type: "object",
                            properties: {
                                "data": {
                                    type: "object",
                                    properties: {
                                        "me": {
                                            type: "object",
                                            properties: {
                                                "name": {
                                                    type: "string",
                                                },
                                                "reviews": {
                                                    type: "array",
                                                    items: {
                                                        type: "object",
                                                        properties: {
                                                            "id": {
                                                                type: "string",
                                                            },
                                                            "body": {
                                                                type: "string"
                                                            }
                                                        },
                                                        additionalProperties: false,
                                                        required: [
                                                            "id"
                                                        ]
                                                    }
                                                }
                                            },
                                            additionalProperties: false,
                                        }
                                    },
                                    additionalProperties: false,
                                },
                            },
                            additionalProperties: false,
                            required: [
                                "data"
                            ],
                        },
                        AuthenticationConfig: {
                            required: false,
                        },
                        AuthorizationConfig: {
                            claims: [],
                        }
                    },
                    {
                        Name: "CreatePet",
                        Content: "mutation CreatePet($petInput: PetInput!) {\n  postPets(petInput: $petInput) {\n    name\n  }\n}",
                        OperationType: wundernode_config_1.OperationType.MUTATION,
                        VariablesSchema: {
                            type: "object",
                            properties: {
                                "petInput": {
                                    additionalProperties: false,
                                    type: "object",
                                    properties: {
                                        "id": {
                                            type: "string"
                                        },
                                        "name": {
                                            type: "string"
                                        }
                                    },
                                    required: [
                                        "id",
                                    ]
                                },
                            },
                            additionalProperties: false,
                            required: [
                                "petInput",
                            ],
                        },
                        ResponseSchema: {
                            type: "object",
                            properties: {
                                "data": {
                                    type: "object",
                                    properties: {
                                        "postPets": {
                                            type: "object",
                                            properties: {
                                                "name": {
                                                    type: "string"
                                                }
                                            },
                                            additionalProperties: false,
                                        }
                                    },
                                    additionalProperties: false,
                                },
                            },
                            additionalProperties: false,
                            required: [
                                "data"
                            ],
                        },
                        AuthenticationConfig: {
                            required: false,
                        },
                        AuthorizationConfig: {
                            claims: [],
                        }
                    },
                    {
                        Name: "NewPets",
                        Content: "subscription NewPets {\n  newPets {\n    name\n  }\n}",
                        OperationType: wundernode_config_1.OperationType.SUBSCRIPTION,
                        VariablesSchema: {
                            type: "object",
                            properties: {},
                            additionalProperties: false,
                        },
                        ResponseSchema: {
                            type: "object",
                            properties: {
                                "data": {
                                    type: "object",
                                    properties: {
                                        "newPets": {
                                            type: "object",
                                            properties: {
                                                "name": {
                                                    type: "string"
                                                }
                                            },
                                            additionalProperties: false,
                                        }
                                    },
                                    additionalProperties: false,
                                },
                            },
                            additionalProperties: false,
                            required: [
                                "data"
                            ],
                        },
                        AuthenticationConfig: {
                            required: false,
                        },
                        AuthorizationConfig: {
                            claims: [],
                        }
                    },
                ],
                CorsConfiguration: {
                    maxAge: 120,
                    exposedHeaders: ["*"],
                    allowedOrigins: ["*"],
                    allowedMethods: ["GET", "POST"],
                    allowedHeaders: ["*"],
                    allowCredentials: true,
                },
            },
            deployment: {
                path: "api/main",
                api: {
                    id: "",
                    name: "api"
                },
                environment: {
                    name: "localhost:9991",
                    id: "",
                },
                name: "main"
            },
            authentication: {
                cookieBased: [],
            },
            enableGraphQLEndpoint: true,
        },
        templates,
    }, fakeFileSystem);
    return {
        equals: expected => {
            chai_1.assert.deepEqual(fakeFileSystem.files, expected);
        }
    };
};
exports.RunTemplateTest = RunTemplateTest;
