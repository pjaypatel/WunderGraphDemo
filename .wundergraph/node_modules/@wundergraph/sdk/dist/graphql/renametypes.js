"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renameTypes = exports.renameTypeFields = void 0;
const graphql_1 = require("graphql");
const renameTypeFields = (schema, rename) => {
    const document = graphql_1.parse(schema);
    let currentTypeName;
    const transformed = graphql_1.visit(document, {
        ObjectTypeDefinition: {
            enter: node => {
                currentTypeName = node.name.value;
            },
            leave: node => {
                currentTypeName = undefined;
            },
        },
        InterfaceTypeDefinition: {
            enter: node => {
                currentTypeName = node.name.value;
            },
            leave: node => {
                currentTypeName = undefined;
            },
        },
        FieldDefinition: (node, key, parent) => {
            const re = rename.find(re => re.typeName === currentTypeName && re.fromFieldName === node.name.value);
            if (re !== undefined) {
                const replacement = {
                    ...node,
                    name: {
                        kind: "Name",
                        value: re.toFieldName,
                    }
                };
                return replacement;
            }
        }
    });
    return graphql_1.print(transformed);
};
exports.renameTypeFields = renameTypeFields;
const renameTypes = (schema, rename) => {
    const document = graphql_1.parse(schema);
    const transformed = graphql_1.visit(document, {
        ObjectTypeDefinition: node => {
            const mod = rename.find(re => re.from === node.name.value);
            if (!mod) {
                return;
            }
            return {
                ...node,
                name: {
                    kind: 'Name',
                    value: mod.to,
                }
            };
        },
        InterfaceTypeDefinition: node => {
            const mod = rename.find(re => re.from === node.name.value);
            if (!mod) {
                return;
            }
            return {
                ...node,
                name: {
                    kind: 'Name',
                    value: mod.to,
                }
            };
        },
        UnionTypeDefinition: node => {
            const mod = rename.find(re => re.from === node.name.value);
            if (!mod) {
                return;
            }
            return {
                ...node,
                name: {
                    kind: 'Name',
                    value: mod.to,
                }
            };
        },
        NamedType: node => {
            const mod = rename.find(re => re.from === node.name.value);
            if (!mod) {
                return;
            }
            return {
                ...node,
                name: {
                    kind: 'Name',
                    value: mod.to,
                }
            };
        }
    });
    return graphql_1.print(transformed);
};
exports.renameTypes = renameTypes;
