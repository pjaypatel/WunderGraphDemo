"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const configuration_1 = require("./configuration");
const chai_1 = require("chai");
const graphql_1 = require("graphql");
const wundernode_config_1 = require("@wundergraph/protobuf/dist/wundernode_config");
const tests = [
    {
        schema: "schema {   query: Query } union _Entity = User type Entity {      findUserByID(id: ID!): User! } type User {      id: ID!      name: String      username: String } scalar _Any scalar _FieldSet type Query {      me: User      _entities(representations: [_Any!]!): [_Entity]!      _service: _Service! } type _Service {      sdl: String }",
        serviceSDL: "type Query @extends {   me: User } type User @key(fields: \"id\") {   id: ID!   name: String   username: String } ",
        config: {
            RootNodes: [
                {
                    typeName: "Query",
                    fieldNames: [
                        "me"
                    ]
                },
                {
                    typeName: "User",
                    fieldNames: ["id", "name", "username"],
                }
            ],
            ChildNodes: [
                {
                    typeName: "User",
                    fieldNames: [
                        "id", "name", "username"
                    ]
                }
            ],
            Fields: []
        }
    },
    {
        schema: "schema {   query: Query } union _Entity = Product type Entity {      findProductByUpc(upc: String!): Product! } scalar _FieldSet type Product {      upc: String!      name: String      price: Int      weight: Int } scalar _Any type Query {      topProducts(first: Int = 5): [Product]      _entities(representations: [_Any!]!): [_Entity]!      _service: _Service! } type _Service {      sdl: String }",
        serviceSDL: "type Query @extends {   topProducts(first: Int = 5): [Product] }  type Product @key(fields: \"upc\") {   upc: String!   name: String   price: Int   weight: Int } ",
        config: {
            RootNodes: [
                {
                    typeName: "Query",
                    fieldNames: [
                        "topProducts"
                    ]
                },
                {
                    typeName: "Product",
                    fieldNames: ["upc", "name", "price", "weight"],
                }
            ],
            ChildNodes: [
                {
                    typeName: "Product",
                    fieldNames: [
                        "upc",
                        "name",
                        "price",
                        "weight"
                    ]
                },
            ],
            Fields: [
                {
                    typeName: "Query",
                    fieldName: "topProducts",
                    argumentsConfiguration: [
                        {
                            name: "first",
                            sourceType: wundernode_config_1.ArgumentSource.FIELD_ARGUMENT,
                            sourcePath: [],
                        }
                    ],
                    disableDefaultFieldMapping: false,
                    path: [],
                    requiresFields: [],
                    respectOverrideFieldPathFromAlias: true,
                }
            ]
        }
    },
    {
        schema: "schema {   query: Query } scalar _FieldSet union _Entity = Product | Review | User type Entity {      findProductByUpc(upc: String!): Product!      findReviewByID(id: ID!): Review!      findUserByID(id: ID!): User! } type Product {      upc: String!      reviews: [Review] } type Query {      _entities(representations: [_Any!]!): [_Entity]!      _service: _Service! } scalar _Any type _Service {      sdl: String } type Review {      id: ID!      body: String      author: User      product: Product } type User {      id: ID!      username: String      reviews: [Review] }",
        serviceSDL: "type Review @key(fields: \"id\") {   id: ID!   body: String   author: User @provides(fields: \"username\")   product: Product }  type User @extends @key(fields: \"id\") {   id: ID! @external   username: String @external   reviews: [Review] }  type Product @extends @key(fields: \"upc\") {   upc: String! @external   reviews: [Review] } ",
        config: {
            RootNodes: [
                {
                    typeName: "Review",
                    fieldNames: ["id", "body", "author", "product"]
                },
                {
                    typeName: "User",
                    fieldNames: [
                        "reviews"
                    ]
                },
                {
                    typeName: "Product",
                    fieldNames: [
                        "reviews"
                    ]
                }
            ],
            ChildNodes: [
                {
                    typeName: "Review",
                    fieldNames: [
                        "id",
                        "body",
                        "author",
                        "product"
                    ]
                },
                {
                    typeName: "User",
                    fieldNames: [
                        "id",
                    ]
                },
                {
                    typeName: "Product",
                    fieldNames: [
                        "upc"
                    ]
                }
            ],
            Fields: [
                {
                    typeName: "User",
                    fieldName: "reviews",
                    requiresFields: [
                        "id"
                    ],
                    argumentsConfiguration: [],
                    respectOverrideFieldPathFromAlias: true,
                    path: [],
                    disableDefaultFieldMapping: false
                },
                {
                    typeName: "Product",
                    fieldName: "reviews",
                    requiresFields: [
                        "upc"
                    ],
                    argumentsConfiguration: [],
                    respectOverrideFieldPathFromAlias: true,
                    path: [],
                    disableDefaultFieldMapping: false
                }
            ]
        }
    },
    {
        schema: "schema {   query: Query } type Product {      upc: String!      weight: Int      price: Int      inStock: Boolean      shippingEstimate: Int } scalar _Any type Entity {      findProductByUpc(upc: String!): Product! } type Query {      _entities(representations: [_Any!]!): [_Entity]!      _service: _Service! } scalar _FieldSet union _Entity = Product type _Service {      sdl: String }",
        serviceSDL: "type Product @extends @key(fields: \"upc\") {     upc: String! @external     weight: Int @external     price: Int @external     inStock: Boolean     shippingEstimate: Int @requires(fields: \"price weight\") } ",
        config: {
            RootNodes: [
                {
                    typeName: "Product",
                    fieldNames: [
                        "inStock",
                        "shippingEstimate"
                    ]
                }
            ],
            ChildNodes: [
                {
                    typeName: "Product",
                    fieldNames: [
                        "upc"
                    ],
                }
            ],
            Fields: [
                {
                    typeName: "Product",
                    fieldName: "inStock",
                    requiresFields: [
                        "upc"
                    ],
                    argumentsConfiguration: [],
                    respectOverrideFieldPathFromAlias: true,
                    path: [],
                    disableDefaultFieldMapping: false
                },
                {
                    typeName: "Product",
                    fieldName: "shippingEstimate",
                    requiresFields: [
                        "upc"
                    ],
                    argumentsConfiguration: [],
                    respectOverrideFieldPathFromAlias: true,
                    path: [],
                    disableDefaultFieldMapping: false
                }
            ]
        }
    }
];
test("configuration", () => {
    tests.forEach((t, i) => {
        const schema = graphql_1.parse(t.schema);
        const serviceSDL = t.serviceSDL === undefined ? undefined : graphql_1.parse(t.serviceSDL);
        const nodes = configuration_1.configuration(schema, serviceSDL);
        chai_1.assert.equal(pretty(nodes), pretty(t.config), "testCase: " + i);
    });
});
const pretty = (input) => {
    return JSON.stringify(input, null, "  ");
};
