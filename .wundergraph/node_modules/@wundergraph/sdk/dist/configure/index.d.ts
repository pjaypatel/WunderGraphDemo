import { Api, Application } from "../definition";
import { GraphQLOperation } from "../graphql/operations";
import { Template } from "../codegen";
import { AuthProvider, CorsConfiguration } from "@wundergraph/protobuf/dist/wundernode_config";
import { AuthenticationProvider } from "./authentication";
import { LinkConfiguration } from "../linkbuilder";
export interface WunderGraphConfigApplicationConfig {
    application: Application;
    codeGenerators?: CodeGen[];
    outFile?: string;
    mock?: WunderGraphMock;
    cors: CorsConfiguration;
    deployment?: DeploymentConfiguration;
    operations?: OperationsConfiguration;
    authentication?: {
        cookieBased?: {
            providers: AuthenticationProvider[];
        };
    };
    links?: LinkConfiguration;
}
interface OperationsConfiguration {
    defaultConfig: BaseOperationConfiguration;
    queries: ConfigureQuery;
    mutations: ConfigureMutation;
    subscriptions: ConfigureSubscription;
    custom?: any;
}
export interface BaseOperationConfiguration {
    authentication: {
        required: boolean;
    };
}
export interface QueryConfiguration extends BaseOperationConfiguration {
    caching: {
        enable: boolean;
        public: boolean;
        maxAge: number;
        staleWhileRevalidate: number;
    };
    liveQuery: {
        enable: boolean;
        pollingIntervalSeconds: number;
    };
}
export interface MutationConfiguration extends BaseOperationConfiguration {
}
export interface SubscriptionConfiguration extends BaseOperationConfiguration {
}
declare type ConfigureQuery = (config: BaseOperationConfiguration) => QueryConfiguration;
declare type ConfigureMutation = (config: BaseOperationConfiguration) => MutationConfiguration;
declare type ConfigureSubscription = (config: BaseOperationConfiguration) => SubscriptionConfiguration;
export interface DeploymentConfiguration {
    name: string;
    api: DeploymentAPI;
    environment: DeploymentEnvironment;
    dangerouslyEnableGraphQLEndpoint?: boolean;
}
export interface DeploymentAPI {
    apiConfig: () => {
        id: string;
        name: string;
    };
}
export interface DeploymentEnvironment {
    environmentConfig: () => {
        id: string;
        name: string;
    };
}
export declare type MockResolver = (input: Object) => Object | undefined;
export interface WunderGraphMock {
    queries?: {
        [name: string]: MockResolver;
    };
    mutations?: {
        [name: string]: MockResolver;
    };
    subscriptions?: {
        [name: string]: {
            pollingIntervalMillis: number;
            resolver: MockResolver;
        };
    };
}
export interface CodeGen {
    path?: string;
    templates: Template[];
}
export interface ResolvedApplication {
    Name: string;
    EnableSingleFlight: boolean;
    EngineConfiguration: Api<any>;
    Operations: GraphQLOperation[];
    CorsConfiguration: CorsConfiguration;
}
interface ResolvedDeployment {
    name: string;
    api: {
        id: string;
        name: string;
    };
    environment: {
        id: string;
        name: string;
    };
    path: string;
}
export interface ResolvedWunderGraphConfig {
    application: ResolvedApplication;
    deployment: ResolvedDeployment;
    sdkVersion: string;
    authentication: {
        cookieBased: AuthProvider[];
    };
    enableGraphQLEndpoint: boolean;
}
export declare const configureWunderGraphApplication: (config: WunderGraphConfigApplicationConfig) => void;
export {};
