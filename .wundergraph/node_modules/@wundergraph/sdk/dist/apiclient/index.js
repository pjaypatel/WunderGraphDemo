"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiClient = void 0;
const axios_1 = __importDefault(require("axios"));
class ApiClient {
    constructor(config) {
        this.do = async (query, variables) => {
            const data = JSON.stringify({
                query: query,
                variables: variables,
            });
            const res = await axios_1.default.post(this.apiURL, data, {
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json",
                    "Authorization": `${this.accessToken}`
                },
            });
            if (res.status !== 200) {
                return Promise.reject(`introspection failed, response code: ${res.status}, message: ${res.statusText}`);
            }
            return res.data.data;
        };
        this.userInfo = async () => {
            return this.do(userInfoQuery, null);
        };
        if (config && config.apiURL) {
            this.apiURL = config.apiURL;
        }
        else {
            this.apiURL = process.env.WUNDERGRAPH_API_URL || "https://api.wundergraph.com/query";
        }
        if (config && config.accessToken) {
            this.accessToken = config.accessToken;
        }
        else {
            this.accessToken = process.env.WUNDERGRAPH_TOKEN || "";
        }
    }
}
exports.ApiClient = ApiClient;
const userInfoQuery = `
query {
  user {
    id
    name
    email
    namespaces {
      ...NamespaceFragment
    }
    accessTokens {
      id
      name
      createdAt
    }
  }
}

fragment ApiFragment on Api {
  id
  name
  markdownDescription
  deployments {
    id
    name
    config
    environments {
      id
      name
    }
  }
}

fragment EnvFragment on Environment {
  id
  name
  primaryHostName
  hostNames
  primary
  edges {
    id
    name
    location
  }
}

fragment NamespaceFragment on Namespace {
  id
  name
  members {
    membership
    user {
      id
      name
      email
    }
  }
  environments {
    ...EnvFragment
  }
  apis {
    ...ApiFragment
  }
}`;
