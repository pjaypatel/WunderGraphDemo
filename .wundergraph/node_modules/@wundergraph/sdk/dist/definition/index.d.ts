import { DataSourceKind, FetchConfiguration, FieldConfiguration, TypeField, UpstreamAuthentication } from "@wundergraph/protobuf/dist/wundernode_config";
export interface ApplicationConfig {
    name: string;
    apis: Promise<Api<any>>[];
}
export declare class Application {
    constructor(config: ApplicationConfig);
    name: string;
    apis: Promise<Api<any>>[];
    enable_singleflight: boolean;
}
export interface RenameType {
    from: string;
    to: string;
}
export interface RenameTypes {
    renameTypes: (rename: RenameType[]) => void;
}
export interface RenameTypeField {
    typeName: string;
    fromFieldName: string;
    toFieldName: string;
}
export interface RenameTypeFields {
    renameTypeFields: (rename: RenameTypeField[]) => void;
}
export declare class Api<T> implements RenameTypes, RenameTypeFields {
    constructor(schema: string, dataSources: DataSource<T>[], fields: FieldConfiguration[]);
    DefaultFlushInterval: number;
    Schema: string;
    DataSources: DataSource<T>[];
    Fields: FieldConfiguration[];
    renameTypes(rename: RenameType[]): void;
    renameTypeFields(rename: RenameTypeField[]): void;
}
export declare class GraphQLApi extends Api<GraphQLApiCustom> {
}
export declare class RESTApi extends Api<RESTApiCustom> {
}
export declare class PostgresqlApi extends Api<DatabaseApiCustom> {
}
export declare class MySQLApi extends Api<DatabaseApiCustom> {
}
export interface DataSource<Custom extends {} = {}> {
    Kind: DataSourceKind;
    RootNodes: TypeField[];
    ChildNodes: TypeField[];
    Custom: Custom;
}
export declare enum IntrospectionPolicy {
    CacheOrNetwork = "CacheOrNetwork",
    Cache = "Cache",
    Network = "Network"
}
export interface GraphQLIntrospection extends GraphQLUpstream {
    source: IntrospectionPolicy;
}
export interface GraphQLFederationIntrospection {
    upstreams: GraphQLUpstream[];
    source: IntrospectionPolicy;
}
export interface PostgresqlIntrospection {
    database_querystring: string;
}
export interface HTTPUpstream {
    headers?: Headers;
    authentication?: HTTPUpstreamAuthentication;
}
export declare type HTTPUpstreamAuthentication = JWTAuthentication | JWTAuthenticationWithAccessTokenExchange;
export interface JWTAuthentication {
    kind: "jwt";
    secret: string;
    signingMethod: JWTSigningMethod;
}
export interface JWTAuthenticationWithAccessTokenExchange {
    kind: "jwt_with_access_token_exchange";
    secret: string;
    signingMethod: JWTSigningMethod;
    accessTokenExchangeEndpoint: string;
}
export declare type JWTSigningMethod = "HS256";
export interface GraphQLUpstream extends HTTPUpstream {
    url: string;
}
export interface OpenAPIIntrospectionFile {
    kind: "file";
    filePath: string;
}
export interface OpenAPIIntrospectionString {
    kind: "string";
    openAPISpec: string;
}
export interface OpenAPIIntrospectionObject {
    kind: "object";
    openAPIObject: {};
}
export declare type OpenAPIIntrospectionSource = OpenAPIIntrospectionFile | OpenAPIIntrospectionString | OpenAPIIntrospectionObject;
export interface Headers {
    [key: string]: string;
}
export interface OpenAPIIntrospection extends HTTPUpstream {
    source: OpenAPIIntrospectionSource;
}
export interface RESTApiCustom {
    Fetch: FetchConfiguration;
    Subscription: SubscriptionConfiguration;
}
export interface DatabaseApiCustom {
    prisma_schema: string;
    graphql_schema: string;
    database_querystring: string;
}
export interface SubscriptionConfiguration {
    Enabled: boolean;
    PollingIntervalMillis?: number;
    SkipPublishSameResponse?: boolean;
}
export interface GraphQLApiCustom {
    Federation: {
        Enabled: boolean;
        ServiceSDL: string;
    };
    Fetch: FetchConfiguration;
    Subscription: {
        Enabled: boolean;
        URL: string;
    };
}
export declare const introspect: {
    graphql: (introspection: GraphQLIntrospection) => Promise<GraphQLApi>;
    postgresql: (introspection: PostgresqlIntrospection) => Promise<PostgresqlApi>;
    mysql: (introspection: PostgresqlIntrospection) => Promise<PostgresqlApi>;
    federation: (introspection: GraphQLFederationIntrospection) => Promise<GraphQLApi>;
    openApi: (introspection: OpenAPIIntrospection) => Promise<RESTApi>;
};
export declare const buildUpstreamAuthentication: (upstream: HTTPUpstream) => (UpstreamAuthentication | undefined);
