"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
const chai_1 = require("chai");
const get_port_1 = __importDefault(require("get-port"));
const express_1 = __importDefault(require("express"));
const cors_1 = __importDefault(require("cors"));
const express_graphql_1 = require("express-graphql");
const graphql_1 = require("graphql");
test("introspection with Headers", async () => {
    const port = await get_port_1.default();
    const schema = graphql_1.buildSchema(`
      type Query {
        hello: String
      }
    `);
    const root = {
        hello: () => {
            return 'Hello world!';
        },
    };
    const app = express_1.default();
    app.use(cors_1.default());
    app.use((req, res, next) => {
        const authorization = req.header("Authorization");
        if (authorization && authorization === "Bearer token") {
            next();
            return;
        }
        res.status(401);
        res.end();
    });
    app.use('/graphql', express_graphql_1.graphqlHTTP({
        schema: schema,
        rootValue: root,
        graphiql: true,
    }));
    const startServer = async () => {
        return new Promise(resolve => {
            const server = app.listen(port, () => {
                resolve(server);
            });
        });
    };
    const server = await startServer();
    const result = await index_1.introspect.graphql({
        url: `http://localhost:${port}/graphql`,
        headers: {
            Authorization: "Bearer token",
        },
        source: index_1.IntrospectionPolicy.Network,
    });
    chai_1.assert.isNotNull(result);
    try {
        const authMissing = await index_1.introspect.graphql({
            url: `http://localhost:${port}/graphql`,
            source: index_1.IntrospectionPolicy.Network,
        });
        chai_1.assert.isUndefined(authMissing);
    }
    catch (e) {
        chai_1.assert.isNotNull(e);
    }
    server.close();
});
