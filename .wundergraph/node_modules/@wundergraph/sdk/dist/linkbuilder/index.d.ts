import { GraphQLSchema } from "graphql";
export declare type LinkConfiguration = LinkDefinition[];
export interface LinkDefinition {
    targetType: string;
    targetFieldName: string;
    sourceField: string;
    argumentSources: LinkFieldArgumentSourceDefinition[];
}
export interface LinkFieldArgumentSourceDefinition {
    name: string;
    type: "objectField" | "fieldArgument";
    path: string[];
}
export interface FieldInfo {
    typeName: string;
    fieldName: string;
    fieldType: string;
    arguments: ArgumentInfo[];
}
export interface ArgumentInfo {
    name: string;
    type: string;
}
export declare const queryTypeFields: (schema: GraphQLSchema) => FieldInfo[];
export interface TypeInfo {
    typeName: string;
    fieldNames: string[];
}
export declare const typesInfo: (schema: GraphQLSchema) => TypeInfo[];
declare class LinkBuilder<T, R extends {} = {}, TT = {}> {
    constructor(current: R | undefined, sourceField: string, targetType: string, targetField: string);
    private readonly sourceField;
    private readonly targetType;
    private readonly targetField;
    private current;
    argument<P extends Exclude<keyof T, keyof R>, V extends T[P], S extends "fieldArgument" | "objectField">(key: P, source: S, value: S extends "fieldArgument" ? string : TT, ...extraPath: string[]): LinkBuilder<T, R & Pick<T, P>, TT>;
    build: () => LinkDefinition;
}
export declare const sourceFieldStep: <T extends {}, R extends {}>() => {
    source: <F extends keyof T>(field: F) => {
        target: <r extends keyof R>(targetType: r, targetField: string) => LinkBuilder<T[F], {}, R[r]>;
    };
};
export {};
